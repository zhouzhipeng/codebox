name: Build Binary


on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]


jobs:

  createrelease:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: "marvinpinto/action-automatic-releases@latest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          title: "MacOS & Windows Build"
          draft: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  buildBinaries:
    name: Build Mac&Win&Ubuntu packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
#          - os: ubuntu-latest
#            TARGET: ubuntu
#            CMD_BUILD: >
#              cd pytool && bash buildLinux.sh  && cd ..  &&
#              bash build-golang-linux.sh &&
#              cp pytool/dist/web dist/web &&
#              cd dist && zip -r9 codebox_ubuntu.zip .
#            OUT_FILE_NAME: codebox_ubuntu.zip
#            ASSET_MIME: application/zip
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
              cd pytool && bash buildMac.sh  && cd ..  &&
              bash build-golang-macos.sh
            OUT_FILE_NAME: codebox_mac.zip
            ASSET_MIME: application/zip
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: >
              bash build-golang-windows.sh  &&
              cd pytool && bash buildWin.sh  && cd .. && cp pytool/dist/web.exe dist/web.exe &&
              cd dist && powershell Compress-Archive  *.exe codebox_win.zip
            OUT_FILE_NAME: codebox_win.zip
            ASSET_MIME: application/zip
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"
      - uses: actions/setup-go@v3
        with:
          go-version: 1.21
      - name: Build with pyinstaller for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}
  buildDebian:
    name: Build Debian packages
    needs: createrelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          tags: tmp-image
          push: false
      - uses: shrink/actions-docker-extract@v1
        id: extract
        with:
          image: tmp-image
          path: /app/.
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Zip files
        id: zip_files
        shell: bash
        run: |
          cd ${{ steps.extract.outputs.destination }} &&
          tar -czvf  ../codebox_debian.tar.gz codebox web
      - name: Upload Release Asset tar
        id: upload-release-asset-tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./codebox_debian.tar.gz
          asset_name: codebox_debian.tar.gz
          asset_content_type: application/tar+gzip
